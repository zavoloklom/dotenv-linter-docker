name: Check for new dotenv-linter release

on:
  schedule:
    - cron: "0 0 * * *"

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Get latest release from dotenv-linter/dotenv-linter
      - name: Get latest release from dotenv-linter
        id: get_release
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dotenv-linter/dotenv-linter/releases/latest | jq -r .tag_name | sed 's/^v//')
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV

      # Get current VERSION
      - name: Read current VERSION
        id: read_version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          
      # Create a new branch, update VERSION file, and push changes
      - name: Update VERSION and push changes to new branch
        if: ${{ env.LATEST_VERSION != env.CURRENT_VERSION }}
        run: |
          git checkout -b update-dotenv-linter-${{ env.LATEST_VERSION }}
          echo "${{ env.LATEST_VERSION }}\n" > VERSION
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "feat: update dotenv-linter version to ${{ env.LATEST_VERSION }}"
          git push origin HEAD

      # Create a Pull Request
      - name: Create Pull Request
        if: ${{ env.LATEST_VERSION != env.CURRENT_VERSION }}
        run: |
          gh pr create --title "Update dotenv-linter to ${{ env.LATEST_VERSION }}" \
            --body "This PR updates the dotenv-linter version to ${{ env.LATEST_VERSION }}" \
            --head update-dotenv-linter-${{ env.LATEST_VERSION }} \
            --base main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
